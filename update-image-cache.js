import fetch from 'node-fetch';
import { XMLParser } from 'fast-xml-parser';
import fs from 'fs';
import crypto from 'crypto';
import * // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è ESM
* as cheerio from 'cheerio';

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const xmlUrl = 'https://prokolgotki.ru/available.xml'; // –û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
const searchUrl = 'https://www.collant.ru/search/?q=';  // –ì–¥–µ –∏—Å–∫–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏
const imageCachePath = 'image_cache.json';          // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ URL
const requestDelay = 1000;                          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ collant.ru (–≤ –º—Å)
const userAgent = 'Mozilla/5.0 (compatible; ProKolgotkiImageCacheUpdater/1.0)'; // User-Agent
// ---

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞.
 * @returns {object} –û–±—ä–µ–∫—Ç –∫—ç—à–∞ { productName: imageUrl }
 */
function loadImageCache() {
  try {
    if (fs.existsSync(imageCachePath)) {
      const data = fs.readFileSync(imageCachePath, 'utf8');
      console.log(`‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ ${imageCachePath}`);
      return JSON.parse(data);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—ç—à–∞ ${imageCachePath}:`, error);
  }
  console.log(`‚ÑπÔ∏è –§–∞–π–ª –∫—ç—à–∞ ${imageCachePath} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.`);
  return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è.
 * @param {object} cache –û–±—ä–µ–∫—Ç –∫—ç—à–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 * @param {object} originalCache –ò—Å—Ö–æ–¥–Ω—ã–π –∫—ç—à –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
 */
function saveImageCache(cache, originalCache) {
  try {
    const normalize = (obj) => JSON.stringify(obj, Object.keys(obj).sort());
    const currentHash = crypto.createHash('sha256').update(normalize(cache)).digest('hex');
    const originalHash = crypto.createHash('sha256').update(normalize(originalCache)).digest('hex');

    if (currentHash !== originalHash) {
      fs.writeFileSync(imageCachePath, JSON.stringify(cache, null, 2));
      console.log(`‚úÖ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${imageCachePath}. –û–±–Ω–æ–≤–ª–µ–Ω–æ/–¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${Object.keys(cache).length - Object.keys(originalCache).length}`);
    } else {
      console.log('‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫—ç—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, —Ñ–∞–π–ª –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.');
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –≤ ${imageCachePath}:`, error);
  }
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏—â–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ collant.ru.
 * –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –Ω–∞–ø—Ä—è–º—É—é, —Ç–æ–ª—å–∫–æ –∏—â–µ—Ç –≤ —Å–µ—Ç–∏.
 * @param {string} name –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.
 * @returns {Promise<string>} –ù–∞–π–¥–µ–Ω–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
 */
async function fetchImageUrlFromWeb(name) {
  console.log(`[–°–µ—Ç—å] ‚òÅÔ∏è –ó–∞–ø—Ä–æ—Å URL –¥–ª—è "${name}"...`);
  try {
    const res = await fetch(`${searchUrl}${encodeURIComponent(name)}`, {
      headers: { 'User-Agent': userAgent }
    });

    if (!res.ok) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –¥–ª—è "${name}". –°—Ç–∞—Ç—É—Å: ${res.status}`);
      return 'https://via.placeholder.com/300x400?text=–ù–µ—Ç+—Ñ–æ—Ç–æ'; // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏
    }

    const html = await res.text();
    const $ = cheerio.load(html);

    const imgElement = $('.prod-cat-item img, .product-item-detail-slider-image img').first();
    let img = imgElement.attr('src') || imgElement.attr('data-src');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
    if (img && (img.includes('no_photo') || img.includes('placeholder') || !img.match(/\.(jpg|jpeg|png|gif|webp)/i))) {
      img = null;
    }
    if (img && img.startsWith('//')) {
      img = `https:${img}`;
    } else if (img && img.startsWith('/')) {
      img = `https://www.collant.ru${img}`;
    } else if (img && !img.startsWith('http')) {
      console.warn(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è "${name}": ${img}`);
      img = null;
    }

    if (img) {
      console.log(`[–°–µ—Ç—å] ‚úÖ –ü–æ–ª—É—á–µ–Ω URL –¥–ª—è "${name}"`);
      return img;
    } else {
      console.log(`‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ.`);
      return 'https://via.placeholder.com/300x400?text=–ù–µ—Ç+—Ñ–æ—Ç–æ'; // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }

  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è "${name}": ${e.message}`);
    return 'https://via.placeholder.com/300x400?text=–û—à–∏–±–∫–∞'; // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞/–∑–∞–ø—Ä–æ—Å–∞
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
 */
async function updateImageCache() {
  const imageCache = loadImageCache();
  const originalCacheForComparison = { ...imageCache }; // –ö–æ–ø–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  let processedNames = new Set(Object.keys(imageCache)); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
  let networkRequestsCount = 0;

  try {
    // 1. –ó–∞–≥—Ä—É–∑–∫–∞ XML –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ XML —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${xmlUrl}...`);
    const response = await fetch(xmlUrl);
    if (!response.ok) {
      throw new Error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å XML. –°—Ç–∞—Ç—É—Å: ${response.status}`);
    }
    const xmlText = await response.text();
    const parser = new XMLParser({ ignoreAttributes: false });
    const json = parser.parse(xmlText);

    const items = json?.rss?.channel?.item;
    if (!items || !Array.isArray(items)) throw new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã (items) –≤ XML!');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤
    const uniqueNames = new Set(items.map(item => item.name).filter(name => name)); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞
    const totalUniqueNames = uniqueNames.size;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${items.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ XML, ${totalUniqueNames} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω.`);
    console.log(`üíæ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: ${Object.keys(imageCache).length} –∑–∞–ø–∏—Å–µ–π.`);

    let currentItemIndex = 0;
    // 2. –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–∞–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    for (const name of uniqueNames) {
      currentItemIndex++;
      const progressPrefix = `[${currentItemIndex}/${totalUniqueNames}]`;

      if (!imageCache.hasOwnProperty(name)) {
        // –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏—â–µ–º –µ–≥–æ –≤ —Å–µ—Ç–∏
        console.log(`${progressPrefix} ‚è≥ "${name}" - –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–∏—Å–∫...`);
        const imageUrl = await fetchImageUrlFromWeb(name);
        imageCache[name] = imageUrl; // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à (–≤ –ø–∞–º—è—Ç–∏)
        networkRequestsCount++;
        await delay(requestDelay); // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      } else {
        // –ò–º—è —É–∂–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
         console.log(`${progressPrefix} ‚úÖ "${name}" - —É–∂–µ –≤ –∫—ç—à–µ.`);
        // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ª–æ–≥ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:
        // if (currentItemIndex % 50 === 0) { // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ 50 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫—ç—à–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        //   console.log(`${progressPrefix} ...–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞...`);
        // }
      }
      processedNames.add(name); // –û—Ç–º–µ—á–∞–µ–º –∏–º—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ
    }

    // 3. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π (—Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ XML)
    let removedCount = 0;
    for (const cachedName in imageCache) {
        if (!uniqueNames.has(cachedName)) {
            // console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞: "${cachedName}"`);
            delete imageCache[cachedName];
            removedCount++;
        }
    }
    if (removedCount > 0) {
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${removedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞.`);
    }


    console.log(`üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–¥–µ–ª–∞–Ω–æ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${networkRequestsCount}.`);

  } catch (error) {
    console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    process.exitCode = 1; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞
  } finally {
    // 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞ –≤ —Ñ–∞–π–ª
    saveImageCache(imageCache, originalCacheForComparison);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
updateImageCache();
